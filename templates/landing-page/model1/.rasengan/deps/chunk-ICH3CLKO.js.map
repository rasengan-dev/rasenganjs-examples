{
  "version": 3,
  "sources": ["../../node_modules/@rasenganjs/image/src/components/image.tsx"],
  "sourcesContent": ["import { useEffect, useState, useRef } from \"react\";\nimport { ImageProps, LoadingFallbackProps } from \"../types/index.js\";\n\nexport default ({\n  src,\n  alt,\n  style,\n  loadingOnViewport = true,\n  ...props\n}: ImageProps & React.HTMLProps<HTMLImageElement>) => {\n  // Local state\n  const [loaded, setLoaded] = useState(false);\n  const [startLoading, setStartLoading] = useState(false);\n  const [imageSrc, setImageSrc] = useState<HTMLImageElement>();\n  \n  // Reference\n  const imageContainerRef = useRef<HTMLDivElement | null>(null);\n\n  // Effects\n\n  /**\n   * Loads an image when it is in the viewport using the IntersectionObserver API.\n   * This effect is used to optimize image loading and reduce initial page load times.\n   *\n   * The effect first checks if the IntersectionObserver API is supported in the current browser.\n   * If not, it sets the `startLoading` state to `true` to load the image immediately.\n   *\n   * If the API is supported, the effect creates a new IntersectionObserver instance and observes\n   * the image element. When the image enters the viewport (i.e., the `isIntersecting` property\n   * of the observed entry is `true`), the `startLoading` state is set to `true` to trigger the\n   * image loading process. The observer is then disconnected to stop observing the element.\n   */\n  useEffect(() => {\n    // Load image when it is in the viewport only\n\n    // Check if IntersectionObserver is supported\n    if (!(\"IntersectionObserver\" in window)) {\n      setStartLoading(true);\n      return;\n    }\n\n    if (!loadingOnViewport) {\n      setStartLoading(true);\n\n      return;\n    }\n\n    // Create new IntersectionObserver\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        // If image is in the viewport, load it\n        if (entry.isIntersecting) {\n          setStartLoading(true);\n        }\n      },\n      {\n        root: null,\n        rootMargin: \"0px\",\n        threshold: 0.1,\n      }\n    );\n\n    // Observe the image element\n    const imageContainer = imageContainerRef.current;\n\n    if (imageContainer) {\n      observer.observe(imageContainer);\n    }\n\n    return () => {\n      observer.disconnect();\n    }\n  }, []);\n\n  /**\n   * Preloads an image and updates the component's state when the image is loaded.\n   *\n   * This effect is triggered when the `src` or `startLoading` props change. It creates a new `Image` object, sets its `src` to the provided `src` prop, and listens for the `onload` event to update the component's state when the image is loaded.\n   *\n   * The effect also cleans up the `onload` event listener when the component is unmounted.\n   *\n   * @param src - The URL of the image to preload.\n   * @param startLoading - A boolean that triggers the preloading process when true.\n   */\n  useEffect(() => {\n    if (!startLoading) return;\n\n    // Preload image\n    const img = new Image();\n\n    // When image is loaded, update state\n    img.onload = () => {\n      setLoaded(true);\n    };\n\n    img.src = src as string;\n\n    // Save image to state\n    setImageSrc(img);\n\n    // Clean up\n    return () => {\n      img.onload = null;\n    };\n  }, [src, startLoading]);\n\n  return (\n    <>\n      <div\n        ref={imageContainerRef}\n        style={{\n          width: props.width || imageSrc?.width || 200,\n          height: props.height || imageSrc?.height || 200,\n          overflow: \"hidden\",\n          position: \"relative\",\n          ...style,\n        }}\n        className={props.className}\n      >\n        {\n          // If image is not loaded, show loading fallback\n          props.loading === \"lazy\" && !loaded && (\n            <div\n              style={{\n                width: \"300%\",\n                height: props.height || imageSrc?.height || 200,\n                backgroundColor: \"#e5e5e5\",\n              }}\n              className={`${\n                props.loading === \"lazy\"\n                  ? props.mode === \"blur\"\n                    ? \"blur-container\"\n                    : \"wave-container wave\"\n                  : \"\"\n              }`}\n            ></div>\n          )\n        }\n\n        <img\n          src={imageSrc?.src}\n          alt={alt}\n          {...props}\n          style={{\n            objectFit: props.objectfit || \"cover\",\n            width: \"100%\",\n            height: \"100%\",\n          }}\n          hidden={props.loading === \"lazy\" ? !loaded : false}\n        />\n      </div>\n    </>\n  );\n};\n\n// Fallback component to show while the image is loading\nexport const LoadingFallback = ({ width, height }: LoadingFallbackProps) => (\n  <div\n    style={{\n      width,\n      height,\n      backgroundColor: \"#e5e5e5\",\n    }}\n  ></div>\n);\n"],
  "mappings": ";;;;;;;;;;;;AAAA,mBAA4C;AAG5C,IAAA,gBAAe,CAAC,EACd,KACA,KACA,OACA,oBAAoB,MACpB,GAAG,MAAK,MAC2C;AAEnD,QAAM,CAAC,QAAQ,SAAS,QAAI,uBAAS,KAAK;AAC1C,QAAM,CAAC,cAAc,eAAe,QAAI,uBAAS,KAAK;AACtD,QAAM,CAAC,UAAU,WAAW,QAAI,uBAAQ;AAGxC,QAAM,wBAAoB,qBAA8B,IAAI;AAgB5D,8BAAU,MAAK;AAIb,QAAI,EAAE,0BAA0B,SAAS;AACvC,sBAAgB,IAAI;AACpB;IACF;AAEA,QAAI,CAAC,mBAAmB;AACtB,sBAAgB,IAAI;AAEpB;IACF;AAGA,UAAM,WAAW,IAAI,qBACnB,CAAC,CAAC,KAAK,MAAK;AAEV,UAAI,MAAM,gBAAgB;AACxB,wBAAgB,IAAI;MACtB;IACF,GACA;MACE,MAAM;MACN,YAAY;MACZ,WAAW;KACZ;AAIH,UAAM,iBAAiB,kBAAkB;AAEzC,QAAI,gBAAgB;AAClB,eAAS,QAAQ,cAAc;IACjC;AAEA,WAAO,MAAK;AACV,eAAS,WAAU;IACrB;EACF,GAAG,CAAA,CAAE;AAYL,8BAAU,MAAK;AACb,QAAI,CAAC;AAAc;AAGnB,UAAM,MAAM,IAAI,MAAK;AAGrB,QAAI,SAAS,MAAK;AAChB,gBAAU,IAAI;IAChB;AAEA,QAAI,MAAM;AAGV,gBAAY,GAAG;AAGf,WAAO,MAAK;AACV,UAAI,SAAS;IACf;EACF,GAAG,CAAC,KAAK,YAAY,CAAC;AAEtB,aACE,mBAAAA,KAAA,mBAAAC,UAAA,EAAA,cACE,mBAAAC,MAAA,OAAA,EACE,KAAK,mBACL,OAAO;IACL,OAAO,MAAM,UAAS,qCAAU,UAAS;IACzC,QAAQ,MAAM,WAAU,qCAAU,WAAU;IAC5C,UAAU;IACV,UAAU;IACV,GAAG;KAEL,WAAW,MAAM,WAAS,UAAA;;IAIxB,MAAM,YAAY,UAAU,CAAC,cAC3B,mBAAAF,KAAA,OAAA,EACE,OAAO;MACL,OAAO;MACP,QAAQ,MAAM,WAAU,qCAAU,WAAU;MAC5C,iBAAiB;OAEnB,WAAW,GACT,MAAM,YAAY,SACd,MAAM,SAAS,SACb,mBACA,wBACF,EACN,GAAE,CAAA;QAKR,mBAAAA,KAAA,OAAA,EACE,KAAK,qCAAU,KACf,KAAQ,GACJ,OACJ,OAAO;MACL,WAAW,MAAM,aAAa;MAC9B,OAAO;MACP,QAAQ;OAEV,QAAQ,MAAM,YAAY,SAAS,CAAC,SAAS,MAAK,CAAA;EAClD,EAAA,CAAA,EACE,CAAA;AAGZ;AAGO,IAAM,kBAAkB,CAAC,EAAE,OAAO,OAAM,UAC7C,mBAAAA,KAAA,OAAA,EACE,OAAO;EACL;EACA;EACA,iBAAiB;EAClB,CAAA;",
  "names": ["_jsx", "_Fragment", "_jsxs"]
}
